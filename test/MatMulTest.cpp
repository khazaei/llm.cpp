//
// Created by Hamidreza Khazaei on 4/20/24.
//

#include <array>

#include "MatOps.h"
#include "MetalCompute.h"
#include "catch2/catch_test_macros.hpp"

constexpr auto batchDim = size_t{3};
constexpr auto sentenceLength = size_t{5};
constexpr auto embeddingDim = size_t{10};
constexpr auto outDim = size_t{7};
constexpr auto totalLenIn = batchDim * sentenceLength * embeddingDim;
constexpr auto totalLenOut = batchDim * sentenceLength * outDim;

constexpr auto in = std::array<float, totalLenIn>{
    -1.1258398e+00, -1.1523602e+00, -2.5057858e-01, -4.3387881e-01, 8.4871036e-01,
    6.9200915e-01,  -3.1601277e-01, -2.1152194e+00, 3.2227492e-01,  -1.2633348e+00,
    3.4998319e-01,  3.0813393e-01,  1.1984151e-01,  1.2376579e+00,  1.1167772e+00,
    -2.4727815e-01, -1.3526537e+00, -1.6959312e+00, 5.6665063e-01,  7.9350835e-01,
    5.9883946e-01,  -1.5550951e+00, -3.4136039e-01, 1.8530061e+00,  7.5018948e-01,
    -5.8549756e-01, -1.7339675e-01, 1.8347794e-01,  1.3893661e+00,  1.5863342e+00,
    9.4629836e-01,  -8.4367675e-01, -6.1358309e-01, 3.1592742e-02,  -4.9267697e-01,
    2.4841475e-01,  4.3969584e-01,  1.1241119e-01,  6.4079237e-01,  4.4115627e-01,
    -1.0230965e-01, 7.9244399e-01,  -2.8966770e-01, 5.2507486e-02,  5.2286047e-01,
    2.3022053e+00,  -1.4688939e+00, -1.5866888e+00, -6.7308992e-01, 8.7283123e-01,

    1.0553575e+00,  1.7784372e-01,  -2.3033547e-01, -3.9175439e-01, 5.4329473e-01,
    -3.9515755e-01, -4.4621718e-01, 7.4402070e-01,  1.5209795e+00,  3.4105027e+00,
    -1.5311843e+00, -1.2341350e+00, 1.8197253e+00,  -5.5152869e-01, -5.6924808e-01,
    9.1997141e-01,  1.1108161e+00,  1.2898741e+00,  -1.4781740e+00, 2.5672328e+00,
    -4.7311980e-01, 3.3555076e-01,  -1.6293260e+00, -5.4974365e-01, -4.7983426e-01,
    -4.9968153e-01, -1.0669804e+00, 1.1149396e+00,  -1.4067143e-01, 8.0575359e-01,
    -9.3348235e-02, 6.8705022e-01,  -8.3831537e-01, 8.9182175e-04,  8.4189409e-01,
    -4.0003416e-01, 1.0394620e+00,  3.5815310e-01,  -2.4600095e-01, 2.3025165e+00,
    -1.8816892e+00, -4.9727023e-02, -1.0449786e+00, -9.5650083e-01, 3.3531860e-02,
    7.1008658e-01,  1.6458670e+00,  -1.3601689e+00, 3.4456542e-01,  5.1986772e-01,

    -2.6133225e+00, -1.6964744e+00, -2.2824179e-01, 2.7995500e-01,  2.4692640e-01,
    7.6887004e-02,  3.3800581e-01,  4.5440176e-01,  4.5694014e-01,  -8.6537135e-01,
    7.8130794e-01,  -9.2678940e-01, -2.1883368e-01, -2.4350653e+00, -7.2914757e-02,
    -3.3986408e-02, 9.6251827e-01,  3.4916824e-01,  -9.2146200e-01, -5.6194786e-02,
    -6.2269849e-01, -4.6372217e-01, 1.9217824e+00,  -4.0254554e-01, 1.2390248e-01,
    1.1647835e+00,  9.2337352e-01,  1.3872952e+00,  -8.8337576e-01, -4.1891348e-01,
    -8.0482650e-01, 5.6560963e-01,  6.1036462e-01,  4.6688354e-01,  -2.0106392e-01,
    -1.1792699e-01, -8.2936686e-01, -1.4072566e+00, 1.6268467e+00,  1.7227320e-01,
    -1.6115024e+00, -4.7944778e-01, 1.5739289e-01,  3.8536271e-01,  5.7365459e-01,
    9.9793130e-01,  5.4360944e-01,  7.8804389e-02,  8.6286008e-01,  -1.9489635e-02};

constexpr auto weight = std::array<float, embeddingDim * outDim>{
    0.3202675, 0.3858277, 0.4640969, 0.3580679, 0.8058562, 0.8751140, 0.5068913,
    0.3150806, 0.7647868, 0.6359461, 0.9217443, 0.4964868, 0.9946194, 0.3322418,
    0.1838930, 0.3390421, 0.4149916, 0.0044258, 0.8837609, 0.2634273, 0.6808038,
    0.5637965, 0.6806185, 0.4259563, 0.7242520, 0.5008004, 0.2366635, 0.7256970,
    0.6813616, 0.2649613, 0.5633130, 0.1088974, 0.5141565, 0.5054691, 0.1465520,
    0.7574118, 0.5660855, 0.2598681, 0.3330202, 0.0272655, 0.4962780, 0.2379343,
    0.0666950, 0.9124038, 0.2880874, 0.0164539, 0.9134594, 0.1663299, 0.3602759,
    0.6080240, 0.4011592, 0.9037464, 0.7476889, 0.5624194, 0.6470613, 0.8614903,
    0.3538402, 0.2119493, 0.6477150, 0.2194088, 0.5627332, 0.0942267, 0.1438596,
    0.9478464, 0.6650960, 0.0865388, 0.2031530, 0.7874780, 0.9110174, 0.0542121};

TEST_CASE("Test matmul.") {
  const auto out = std::vector<float>{
      -1.1708975, -1.8010461, -2.5352421, -1.1150119, -2.2821302, -1.4077140, -2.0698471,
      1.1313159,  1.2684772,  0.7512274,  -0.1018000, 0.8708464,  1.4172126,  1.0866387,
      2.2303445,  1.5700667,  1.7970978,  1.0510538,  3.1388011,  0.8282740,  3.8069866,
      0.5533872,  0.7126963,  0.2711436,  0.7611715,  1.0383805,  -0.2373878, 0.8740477,
      1.3891894,  -0.0763586, 0.0075252,  0.2824090,  -0.9626103, 1.7092115,  -1.5415950,

      3.5918145,  2.7284651,  3.0650239,  0.6179950,  2.6810713,  1.9359235,  2.5991089,
      1.4984508,  -0.3535559, 0.1858113,  0.8150347,  0.6733762,  0.0172896,  -1.5039616,
      -1.5837415, -2.6802733, -1.3995588, -2.1335082, -1.2616304, -2.2104676, -0.7757092,
      2.0906959,  0.2628427,  1.1113933,  0.0744028,  2.6184402,  0.9468732,  0.8116964,
      0.1989748,  -1.7508932, -2.2728944, -0.8362587, -0.1493121, -0.8543105, -2.4314208,

      -1.1172827, -2.9954731, -2.0625782, -1.1002806, -1.3651800, -2.0467215, -0.4311882,
      -1.3118834, -1.2197636, -1.4081610, -0.7133889, -1.5195417, -2.3283510, -2.4106598,
      1.4517329,  0.8894802,  1.6366048,  1.8613476,  -0.1023734, 1.5819037,  0.1365832,
      0.6356336,  1.3569322,  0.1171722,  -0.2494671, -0.1588113, 1.1753585,  0.2015544,
      1.7934126,  -0.0116513, 0.5876755,  0.7706643,  0.4386462,  1.2492106,  0.8612962};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  llm::matMul(outView, inView, weightView);
  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(out, outMatMul, eps));
}

TEST_CASE("Test matmul with bias.") {
  constexpr auto bias = std::array<float, outDim>{
      0.9384382, 0.1752944, 0.4431192, 0.6432468, 0.5159292, 0.1635591, 0.0958391};

  const auto outBias = std::vector<float>{
      -0.2324592, -1.6257517, -2.0921228, -0.4717652, -1.7662010, -1.2441549, -1.9740080,
      2.0697541,  1.4437716,  1.1943467,  0.5414468,  1.3867755,  1.5807717,  1.1824778,
      3.1687827,  1.7453611,  2.2402170,  1.6943005,  3.6547303,  0.9918332,  3.9028258,
      1.4918255,  0.8879907,  0.7142628,  1.4044182,  1.5543096,  -0.0738287, 0.9698868,
      2.3276277,  0.0989358,  0.4506444,  0.9256557,  -0.4466811, 1.8727705,  -1.4457558,

      4.5302529,  2.9037595,  3.5081432,  1.2612418,  3.1970005,  2.0994825,  2.6949482,
      2.4368889,  -0.1782615, 0.6289306,  1.4582815,  1.1893053,  0.1808487,  -1.4081224,
      -0.6453033, -2.5049789, -0.9564396, -1.4902614, -0.7457013, -2.0469084, -0.6798700,
      3.0291340,  0.4381371,  1.5545125,  0.7176495,  3.1343694,  1.1104324,  0.9075356,
      1.1374130,  -1.5755988, -1.8297751, -0.1930119, 0.3666170,  -0.6907514, -2.3355818,

      -0.1788445, -2.8201787, -1.6194589, -0.4570339, -0.8492509, -1.8831623, -0.3353490,
      -0.3734452, -1.0444692, -0.9650418, -0.0701421, -1.0036125, -2.1647918, -2.3148208,
      2.3901711,  1.0647745,  2.0797241,  2.5045943,  0.4135558,  1.7454629,  0.2324224,
      1.5740719,  1.5322266,  0.5602915,  0.3937797,  0.3571179,  1.3389177,  0.2973936,
      2.7318509,  0.1636431,  1.0307947,  1.4139111,  0.9545754,  1.4127698,  0.9571354};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  llm::matMul(outView, inView, weightView,
              llm::view<const float, 1>{bias.data(), bias.size()});
  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(outBias, outMatMul, eps));
}

TEST_CASE("Test matmul neon.") {
  const auto out = std::vector<float>{
      -1.1708975, -1.8010461, -2.5352421, -1.1150119, -2.2821302, -1.4077140, -2.0698471,
      1.1313159,  1.2684772,  0.7512274,  -0.1018000, 0.8708464,  1.4172126,  1.0866387,
      2.2303445,  1.5700667,  1.7970978,  1.0510538,  3.1388011,  0.8282740,  3.8069866,
      0.5533872,  0.7126963,  0.2711436,  0.7611715,  1.0383805,  -0.2373878, 0.8740477,
      1.3891894,  -0.0763586, 0.0075252,  0.2824090,  -0.9626103, 1.7092115,  -1.5415950,

      3.5918145,  2.7284651,  3.0650239,  0.6179950,  2.6810713,  1.9359235,  2.5991089,
      1.4984508,  -0.3535559, 0.1858113,  0.8150347,  0.6733762,  0.0172896,  -1.5039616,
      -1.5837415, -2.6802733, -1.3995588, -2.1335082, -1.2616304, -2.2104676, -0.7757092,
      2.0906959,  0.2628427,  1.1113933,  0.0744028,  2.6184402,  0.9468732,  0.8116964,
      0.1989748,  -1.7508932, -2.2728944, -0.8362587, -0.1493121, -0.8543105, -2.4314208,

      -1.1172827, -2.9954731, -2.0625782, -1.1002806, -1.3651800, -2.0467215, -0.4311882,
      -1.3118834, -1.2197636, -1.4081610, -0.7133889, -1.5195417, -2.3283510, -2.4106598,
      1.4517329,  0.8894802,  1.6366048,  1.8613476,  -0.1023734, 1.5819037,  0.1365832,
      0.6356336,  1.3569322,  0.1171722,  -0.2494671, -0.1588113, 1.1753585,  0.2015544,
      1.7934126,  -0.0116513, 0.5876755,  0.7706643,  0.4386462,  1.2492106,  0.8612962};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  llm::matMulNeon(outView, inView, weightView);
  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(out, outMatMul, eps));
}

TEST_CASE("Test matmul neon with bias.") {
  constexpr auto bias = std::array<float, outDim>{
      0.9384382, 0.1752944, 0.4431192, 0.6432468, 0.5159292, 0.1635591, 0.0958391};

  const auto outBias = std::vector<float>{
      -0.2324592, -1.6257517, -2.0921228, -0.4717652, -1.7662010, -1.2441549, -1.9740080,
      2.0697541,  1.4437716,  1.1943467,  0.5414468,  1.3867755,  1.5807717,  1.1824778,
      3.1687827,  1.7453611,  2.2402170,  1.6943005,  3.6547303,  0.9918332,  3.9028258,
      1.4918255,  0.8879907,  0.7142628,  1.4044182,  1.5543096,  -0.0738287, 0.9698868,
      2.3276277,  0.0989358,  0.4506444,  0.9256557,  -0.4466811, 1.8727705,  -1.4457558,

      4.5302529,  2.9037595,  3.5081432,  1.2612418,  3.1970005,  2.0994825,  2.6949482,
      2.4368889,  -0.1782615, 0.6289306,  1.4582815,  1.1893053,  0.1808487,  -1.4081224,
      -0.6453033, -2.5049789, -0.9564396, -1.4902614, -0.7457013, -2.0469084, -0.6798700,
      3.0291340,  0.4381371,  1.5545125,  0.7176495,  3.1343694,  1.1104324,  0.9075356,
      1.1374130,  -1.5755988, -1.8297751, -0.1930119, 0.3666170,  -0.6907514, -2.3355818,

      -0.1788445, -2.8201787, -1.6194589, -0.4570339, -0.8492509, -1.8831623, -0.3353490,
      -0.3734452, -1.0444692, -0.9650418, -0.0701421, -1.0036125, -2.1647918, -2.3148208,
      2.3901711,  1.0647745,  2.0797241,  2.5045943,  0.4135558,  1.7454629,  0.2324224,
      1.5740719,  1.5322266,  0.5602915,  0.3937797,  0.3571179,  1.3389177,  0.2973936,
      2.7318509,  0.1636431,  1.0307947,  1.4139111,  0.9545754,  1.4127698,  0.9571354};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  llm::matMulNeon(outView, inView, weightView,
                  llm::view<const float, 1>{bias.data(), bias.size()});
  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(outBias, outMatMul, eps));
}

TEST_CASE("Test matmul metal.") {
  const auto out = std::vector<float>{
      -1.1708975, -1.8010461, -2.5352421, -1.1150119, -2.2821302, -1.4077140, -2.0698471,
      1.1313159,  1.2684772,  0.7512274,  -0.1018000, 0.8708464,  1.4172126,  1.0866387,
      2.2303445,  1.5700667,  1.7970978,  1.0510538,  3.1388011,  0.8282740,  3.8069866,
      0.5533872,  0.7126963,  0.2711436,  0.7611715,  1.0383805,  -0.2373878, 0.8740477,
      1.3891894,  -0.0763586, 0.0075252,  0.2824090,  -0.9626103, 1.7092115,  -1.5415950,

      3.5918145,  2.7284651,  3.0650239,  0.6179950,  2.6810713,  1.9359235,  2.5991089,
      1.4984508,  -0.3535559, 0.1858113,  0.8150347,  0.6733762,  0.0172896,  -1.5039616,
      -1.5837415, -2.6802733, -1.3995588, -2.1335082, -1.2616304, -2.2104676, -0.7757092,
      2.0906959,  0.2628427,  1.1113933,  0.0744028,  2.6184402,  0.9468732,  0.8116964,
      0.1989748,  -1.7508932, -2.2728944, -0.8362587, -0.1493121, -0.8543105, -2.4314208,

      -1.1172827, -2.9954731, -2.0625782, -1.1002806, -1.3651800, -2.0467215, -0.4311882,
      -1.3118834, -1.2197636, -1.4081610, -0.7133889, -1.5195417, -2.3283510, -2.4106598,
      1.4517329,  0.8894802,  1.6366048,  1.8613476,  -0.1023734, 1.5819037,  0.1365832,
      0.6356336,  1.3569322,  0.1171722,  -0.2494671, -0.1588113, 1.1753585,  0.2015544,
      1.7934126,  -0.0116513, 0.5876755,  0.7706643,  0.4386462,  1.2492106,  0.8612962};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  auto metal = llm::MetalCompute{};
  metal.setup();
  metal.matMul(outView, inView, weightView);

  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(out, outMatMul, eps));
}

TEST_CASE("Test matmul metal with bias 0.") {
  constexpr auto bias = std::array<float, outDim>{
      0, 0, 0, 0, 0, 0, 0};

  const auto out = std::vector<float>{
      -1.1708975, -1.8010461, -2.5352421, -1.1150119, -2.2821302, -1.4077140, -2.0698471,
      1.1313159,  1.2684772,  0.7512274,  -0.1018000, 0.8708464,  1.4172126,  1.0866387,
      2.2303445,  1.5700667,  1.7970978,  1.0510538,  3.1388011,  0.8282740,  3.8069866,
      0.5533872,  0.7126963,  0.2711436,  0.7611715,  1.0383805,  -0.2373878, 0.8740477,
      1.3891894,  -0.0763586, 0.0075252,  0.2824090,  -0.9626103, 1.7092115,  -1.5415950,

      3.5918145,  2.7284651,  3.0650239,  0.6179950,  2.6810713,  1.9359235,  2.5991089,
      1.4984508,  -0.3535559, 0.1858113,  0.8150347,  0.6733762,  0.0172896,  -1.5039616,
      -1.5837415, -2.6802733, -1.3995588, -2.1335082, -1.2616304, -2.2104676, -0.7757092,
      2.0906959,  0.2628427,  1.1113933,  0.0744028,  2.6184402,  0.9468732,  0.8116964,
      0.1989748,  -1.7508932, -2.2728944, -0.8362587, -0.1493121, -0.8543105, -2.4314208,

      -1.1172827, -2.9954731, -2.0625782, -1.1002806, -1.3651800, -2.0467215, -0.4311882,
      -1.3118834, -1.2197636, -1.4081610, -0.7133889, -1.5195417, -2.3283510, -2.4106598,
      1.4517329,  0.8894802,  1.6366048,  1.8613476,  -0.1023734, 1.5819037,  0.1365832,
      0.6356336,  1.3569322,  0.1171722,  -0.2494671, -0.1588113, 1.1753585,  0.2015544,
      1.7934126,  -0.0116513, 0.5876755,  0.7706643,  0.4386462,  1.2492106,  0.8612962};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  auto metal = llm::MetalCompute{};
  metal.setup();
  metal.matMul(outView, inView, weightView, llm::view<const float, 1>{bias.data(), bias.size()});

  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(out, outMatMul, eps));
}


TEST_CASE("Test matmul metal with bias.") {
  constexpr auto bias = std::array<float, outDim>{
      0.9384382, 0.1752944, 0.4431192, 0.6432468, 0.5159292, 0.1635591, 0.0958391};

  const auto outBias = std::vector<float>{
      -0.2324592, -1.6257517, -2.0921228, -0.4717652, -1.7662010, -1.2441549, -1.9740080,
      2.0697541,  1.4437716,  1.1943467,  0.5414468,  1.3867755,  1.5807717,  1.1824778,
      3.1687827,  1.7453611,  2.2402170,  1.6943005,  3.6547303,  0.9918332,  3.9028258,
      1.4918255,  0.8879907,  0.7142628,  1.4044182,  1.5543096,  -0.0738287, 0.9698868,
      2.3276277,  0.0989358,  0.4506444,  0.9256557,  -0.4466811, 1.8727705,  -1.4457558,

      4.5302529,  2.9037595,  3.5081432,  1.2612418,  3.1970005,  2.0994825,  2.6949482,
      2.4368889,  -0.1782615, 0.6289306,  1.4582815,  1.1893053,  0.1808487,  -1.4081224,
      -0.6453033, -2.5049789, -0.9564396, -1.4902614, -0.7457013, -2.0469084, -0.6798700,
      3.0291340,  0.4381371,  1.5545125,  0.7176495,  3.1343694,  1.1104324,  0.9075356,
      1.1374130,  -1.5755988, -1.8297751, -0.1930119, 0.3666170,  -0.6907514, -2.3355818,

      -0.1788445, -2.8201787, -1.6194589, -0.4570339, -0.8492509, -1.8831623, -0.3353490,
      -0.3734452, -1.0444692, -0.9650418, -0.0701421, -1.0036125, -2.1647918, -2.3148208,
      2.3901711,  1.0647745,  2.0797241,  2.5045943,  0.4135558,  1.7454629,  0.2324224,
      1.5740719,  1.5322266,  0.5602915,  0.3937797,  0.3571179,  1.3389177,  0.2973936,
      2.7318509,  0.1636431,  1.0307947,  1.4139111,  0.9545754,  1.4127698,  0.9571354};

  const auto inView =
      llm::view<const float, 3>{in.data(), batchDim, sentenceLength, embeddingDim};
  auto outMatMul = std::vector<float>(totalLenOut);
  auto outView = llm::view<float, 3>{outMatMul.data(), batchDim, sentenceLength, outDim};
  const auto weightView = llm::view<const float, 2>{weight.data(), outDim, embeddingDim};

  auto metal = llm::MetalCompute{};
  metal.setup();
  metal.matMul(outView, inView, weightView,
            llm::view<const float, 1>{bias.data(), bias.size()});

  constexpr auto eps = 1e-6;
  CHECK(llm::isTensorsEqual(outBias, outMatMul, eps));
}